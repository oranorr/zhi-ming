import 'dart:convert';
import 'dart:ui';

import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:zhi_ming/core/services/deepseek/deepseek_service.dart';
import 'package:zhi_ming/features/history/data/chat_history_service.dart';
import 'package:zhi_ming/features/onboard/data/onboard_repo.dart';
import 'package:zhi_ming/features/onboard/data/user_profile_service.dart';
import 'package:zhi_ming/features/home/domain/question_entity.dart';
import 'package:zhi_ming/core/theme/theme_colors.dart';

/// –ú–æ–¥–µ–ª—å –¥–ª—è –æ–¥–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç DeepSeek
class RecommendationCard {
  const RecommendationCard({required this.question, required this.description});

  factory RecommendationCard.fromJson(Map<String, dynamic> json) {
    return RecommendationCard(
      question: json['question'] as String,
      description: json['description'] as String,
    );
  }

  /// –í–æ–ø—Ä–æ—Å –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
  final String question;

  /// –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
  final String description;

  Map<String, dynamic> toJson() {
    return {'question': question, 'description': description};
  }

  @override
  String toString() {
    return 'RecommendationCard(question: $question, description: $description)';
  }
}

/// –ú–æ–¥–µ–ª—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
class SavedRecommendations {
  const SavedRecommendations({
    required this.recommendations,
    required this.generatedAt,
    required this.userInterests,
    required this.deviceLanguage,
  });

  factory SavedRecommendations.fromJson(Map<String, dynamic> json) {
    return SavedRecommendations(
      recommendations:
          (json['recommendations'] as List<dynamic>)
              .map(
                (item) =>
                    RecommendationCard.fromJson(item as Map<String, dynamic>),
              )
              .toList(),
      generatedAt: DateTime.parse(json['generatedAt'] as String),
      userInterests:
          (json['userInterests'] as List<dynamic>)
              .map((item) => item as String)
              .toList(),
      deviceLanguage: json['deviceLanguage'] as String,
    );
  }

  /// –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  final List<RecommendationCard> recommendations;

  /// –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  final DateTime generatedAt;

  /// –ò–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –º–æ–º–µ–Ω—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  final List<String> userInterests;

  /// –Ø–∑—ã–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  final String deviceLanguage;

  Map<String, dynamic> toJson() {
    return {
      'recommendations': recommendations.map((r) => r.toJson()).toList(),
      'generatedAt': generatedAt.toIso8601String(),
      'userInterests': userInterests,
      'deviceLanguage': deviceLanguage,
    };
  }

  @override
  String toString() {
    return 'SavedRecommendations(count: ${recommendations.length}, generatedAt: $generatedAt, interests: $userInterests)';
  }
}

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞
/// –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class RecommendationsService {
  factory RecommendationsService() => _instance;
  RecommendationsService._internal();

  /// Singleton instance
  static final RecommendationsService _instance =
      RecommendationsService._internal();

  // –ö–ª—é—á–∏ –¥–ª—è SharedPreferences
  static const String _mainRecommendationsKey =
      'main_recommendations'; // –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–¥–ª—è –¥–æ–º–∞—à–Ω–µ–≥–æ —ç–∫—Ä–∞–Ω–∞)
  static const String _newRecommendationsKey =
      'new_recommendations'; // –ù–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–ø–æ—Å–ª–µ –≥–∞–¥–∞–Ω–∏—è)

  final UserProfileService _userProfileService = UserProfileService();
  final ChatHistoryService _chatHistoryService = ChatHistoryService();
  final DeepSeekService _deepSeekService = DeepSeekService();

  /// –¶–≤–µ—Ç–æ–≤—ã–µ –ø–∞—Ä—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ (–∫–∞–∫ –≤ HomeLocalRepo)
  final List<Map<String, Color>> _colorPairs = [
    {'back': ZColors.blueLight, 'arrow': ZColors.blueMiddle},
    {'back': ZColors.pinkMiddle, 'arrow': ZColors.pinkDark},
    {'back': ZColors.yellowLight, 'arrow': ZColors.yellowMiddle},
    {'back': ZColors.purpleLight, 'arrow': ZColors.purpleMiddle},
  ];

  /// –ö—ç—à –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö QuestionEntity
  List<QuestionEntity> _cachedQuestionEntities = [];

  /// –ü–æ–ª—É—á–∞–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ QuestionEntity (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HomePage)
  List<QuestionEntity> getQuestionEntities() {
    return _cachedQuestionEntities;
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  Future<bool> hasSavedRecommendations() async {
    final saved = await _loadMainRecommendations();
    return saved != null;
  }

  /// –û—á–∏—â–∞–µ—Ç –≤—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥)
  Future<bool> clearRecommendations() async {
    debugPrint('[RecommendationsService] –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π');
    _cachedQuestionEntities.clear();
    await _clearMainRecommendations();
    await _clearNewRecommendations();
    return true;
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏
  Future<void> _checkAndPromoteNewRecommendations() async {
    try {
      debugPrint(
        '[RecommendationsService] –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ',
      );

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      final newRecommendations = await _loadNewRecommendations();

      if (newRecommendations != null) {
        debugPrint(
          '[RecommendationsService] üîÑ –ù–ê–ô–î–ï–ù–´ –Ω–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏! –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∏—Ö –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ',
        );
        debugPrint(
          '[RecommendationsService] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: ${newRecommendations.recommendations.length}',
        );

        // –í—ã–≤–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–Ω–æ—Å–æ–º
        debugPrint('[RecommendationsService] –°–û–î–ï–†–ñ–ò–ú–û–ï –Ω–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:');
        for (int i = 0; i < newRecommendations.recommendations.length; i++) {
          final rec = newRecommendations.recommendations[i];
          debugPrint('[RecommendationsService] ${i + 1}. "${rec.question}"');
          debugPrint(
            '[RecommendationsService]    –û–ø–∏—Å–∞–Ω–∏–µ: ${rec.description}',
          );
        }

        // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        final promoted = await _saveMainRecommendations(newRecommendations);

        if (promoted) {
          debugPrint(
            '[RecommendationsService] ‚úÖ –ù–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ',
          );

          // –û—á–∏—â–∞–µ–º –Ω–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞
          final cleared = await _clearNewRecommendations();

          if (cleared) {
            debugPrint('[RecommendationsService] üóëÔ∏è –ù–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –æ—á–∏—â–µ–Ω–æ');
          } else {
            debugPrint(
              '[RecommendationsService] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –Ω–æ–≤–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞',
            );
          }
        } else {
          debugPrint(
            '[RecommendationsService] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –Ω–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π',
          );
        }
      } else {
        debugPrint(
          '[RecommendationsService] –ù–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –Ω–∏—á–µ–≥–æ –Ω–µ –ø–µ—Ä–µ–Ω–æ—Å–∏–º',
        );
      }
    } catch (e) {
      debugPrint(
        '[RecommendationsService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –Ω–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: $e',
      );
    }
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –∏—Ö –≤ –æ—Å–Ω–æ–≤–Ω—ã–µ
  Future<void> initialize() async {
    debugPrint('[RecommendationsService] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞');

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    await _checkAndPromoteNewRecommendations();

    // –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    await _loadMainRecommendations();
  }

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (main)
  Future<bool> _saveMainRecommendations(
    SavedRecommendations savedRecommendations,
  ) async {
    try {
      debugPrint(
        '[RecommendationsService] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –û–°–ù–û–í–ù–´–• —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ',
      );

      final prefs = await SharedPreferences.getInstance();
      final json = jsonEncode(savedRecommendations.toJson());
      await prefs.setString(_mainRecommendationsKey, json);

      debugPrint(
        '[RecommendationsService] –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${savedRecommendations.recommendations.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤',
      );
      return true;
    } catch (e) {
      debugPrint(
        '[RecommendationsService] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: $e',
      );
      return false;
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ –Ω–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (new)
  Future<bool> _saveNewRecommendations(
    SavedRecommendations savedRecommendations,
  ) async {
    try {
      debugPrint(
        '[RecommendationsService] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ù–û–í–´–• —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ',
      );

      final prefs = await SharedPreferences.getInstance();
      final json = jsonEncode(savedRecommendations.toJson());
      await prefs.setString(_newRecommendationsKey, json);

      debugPrint(
        '[RecommendationsService] –ù–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${savedRecommendations.recommendations.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤',
      );
      return true;
    } catch (e) {
      debugPrint(
        '[RecommendationsService] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: $e',
      );
      return false;
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (main)
  Future<SavedRecommendations?> _loadMainRecommendations() async {
    try {
      debugPrint(
        '[RecommendationsService] –ó–∞–≥—Ä—É–∑–∫–∞ –û–°–ù–û–í–ù–´–• —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π',
      );

      final prefs = await SharedPreferences.getInstance();
      final jsonString = prefs.getString(_mainRecommendationsKey);

      if (jsonString == null) {
        debugPrint('[RecommendationsService] –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return null;
      }

      final json = jsonDecode(jsonString) as Map<String, dynamic>;
      final savedRecommendations = SavedRecommendations.fromJson(json);

      debugPrint(
        '[RecommendationsService] –ó–∞–≥—Ä—É–∂–µ–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: ${savedRecommendations.recommendations.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤',
      );

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ QuestionEntity –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      final questionEntities = _createQuestionEntitiesFromRecommendations(
        savedRecommendations.recommendations,
      );
      _cachedQuestionEntities = questionEntities;

      debugPrint(
        '[RecommendationsService] –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –∫—ç—à: ${questionEntities.length} –∫–∞—Ä—Ç–æ—á–µ–∫',
      );

      return savedRecommendations;
    } catch (e) {
      debugPrint(
        '[RecommendationsService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: $e',
      );
      return null;
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (new)
  Future<SavedRecommendations?> _loadNewRecommendations() async {
    try {
      debugPrint(
        '[RecommendationsService] –ó–∞–≥—Ä—É–∑–∫–∞ –ù–û–í–´–• —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π',
      );

      final prefs = await SharedPreferences.getInstance();
      final jsonString = prefs.getString(_newRecommendationsKey);

      if (jsonString == null) {
        debugPrint('[RecommendationsService] –ù–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return null;
      }

      final json = jsonDecode(jsonString) as Map<String, dynamic>;
      final savedRecommendations = SavedRecommendations.fromJson(json);

      debugPrint(
        '[RecommendationsService] –ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: ${savedRecommendations.recommendations.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤',
      );

      return savedRecommendations;
    } catch (e) {
      debugPrint(
        '[RecommendationsService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: $e',
      );
      return null;
    }
  }

  /// –û—á–∏—Å—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  Future<bool> _clearMainRecommendations() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_mainRecommendationsKey);
      debugPrint('[RecommendationsService] –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã');
      return true;
    } catch (e) {
      debugPrint(
        '[RecommendationsService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: $e',
      );
      return false;
    }
  }

  /// –û—á–∏—Å—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  Future<bool> _clearNewRecommendations() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_newRecommendationsKey);
      debugPrint('[RecommendationsService] –ù–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã');
      return true;
    } catch (e) {
      debugPrint(
        '[RecommendationsService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –Ω–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: $e',
      );
      return false;
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç —è–∑—ã–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  String _getDeviceLanguage() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —è–∑—ã–∫–æ–≤–æ–π –∫–æ–¥ –±–µ–∑ —Å—Ç—Ä–∞–Ω—ã
      final locale = PlatformDispatcher.instance.locale;
      return locale.languageCode;
    } catch (e) {
      return 'en'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
  Future<List<Interest>> getUserInterests() async {
    try {
      debugPrint('[RecommendationsService] –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');

      final userProfile = await _userProfileService.loadUserProfile();

      if (userProfile != null) {
        debugPrint(
          '[RecommendationsService] –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω: ${userProfile.name}',
        );
        debugPrint(
          '[RecommendationsService] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: ${userProfile.interests.length}',
        );

        // –í—ã–≤–æ–¥–∏–º –∫–∞–∂–¥—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –≤ –∫–æ–Ω—Å–æ–ª—å
        for (int i = 0; i < userProfile.interests.length; i++) {
          final interest = userProfile.interests[i];
          debugPrint('[RecommendationsService] ${i + 1}. ${interest.name}');
        }

        return userProfile.interests;
      } else {
        debugPrint('[RecommendationsService] –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return [];
      }
    } catch (e) {
      debugPrint('[RecommendationsService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: $e');
      return [];
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –≥–ª–∞–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤
  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
  Future<List<String>> getChatHistoryQuestions() async {
    try {
      debugPrint('[RecommendationsService] –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —á–∞—Ç–æ–≤');

      final allChats = await _chatHistoryService.getAllChats();

      if (allChats.isNotEmpty) {
        debugPrint(
          '[RecommendationsService] –ù–∞–π–¥–µ–Ω–æ ${allChats.length} —á–∞—Ç–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏',
        );

        // –ò–∑–≤–ª–µ–∫–∞–µ–º mainQuestion –∏–∑ –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
        final questions = allChats.map((chat) => chat.mainQuestion).toList();

        // –í—ã–≤–æ–¥–∏–º –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –≤ –∫–æ–Ω—Å–æ–ª—å
        for (int i = 0; i < questions.length; i++) {
          final question = questions[i];
          final chatDate = allChats[i].createdAt;
          debugPrint(
            '[RecommendationsService] ${i + 1}. "$question" (${chatDate.day}/${chatDate.month}/${chatDate.year})',
          );
        }

        return questions;
      } else {
        debugPrint('[RecommendationsService] –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤ –ø—É—Å—Ç–∞');
        return [];
      }
    } catch (e) {
      debugPrint(
        '[RecommendationsService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: $e',
      );
      return [];
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–∏—Ö–æ (–±–µ–∑ –ª–æ–≥–æ–≤)
  Future<List<Interest>> _getUserInterestsQuiet() async {
    try {
      final userProfile = await _userProfileService.loadUserProfile();
      return userProfile?.interests ?? [];
    } catch (e) {
      return [];
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–∏—Ö–æ (–±–µ–∑ –ª–æ–≥–æ–≤)
  Future<List<String>> _getChatHistoryQuestionsQuiet() async {
    try {
      final allChats = await _chatHistoryService.getAllChats();
      return allChats.map((chat) => chat.mainQuestion).toList();
    } catch (e) {
      return [];
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ—Ñ–∏–ª—å —Å –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏
  Future<bool> hasUserProfile() async {
    try {
      return await _userProfileService.hasUserProfile();
    } catch (e) {
      debugPrint('[RecommendationsService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ—Ñ–∏–ª—è: $e');
      return false;
    }
  }

  /// –ü–∞—Ä—Å–∏—Ç JSON –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  List<RecommendationCard> _parseDeepSeekResponse(String response) {
    try {
      debugPrint(
        '[RecommendationsService] –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç DeepSeek',
      );

      // –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ markdown –±–ª–æ–∫–∞
      String jsonString = _extractJsonFromResponse(response);

      debugPrint(
        '[RecommendationsService] –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π JSON (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): ${jsonString.length > 200 ? "${jsonString.substring(0, 200)}..." : jsonString}',
      );

      final Map<String, dynamic> json = jsonDecode(jsonString);

      if (json.containsKey('recommendations') &&
          json['recommendations'] is List) {
        final List<dynamic> recommendationsList = json['recommendations'];

        debugPrint(
          '[RecommendationsService] –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ JSON: ${recommendationsList.length}',
        );

        return recommendationsList
            .map(
              (item) =>
                  RecommendationCard.fromJson(item as Map<String, dynamic>),
            )
            .toList();
      } else {
        debugPrint(
          '[RecommendationsService] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç DeepSeek: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ recommendations',
        );
        debugPrint(
          '[RecommendationsService] –ö–ª—é—á–∏ –≤ JSON: ${json.keys.toList()}',
        );
        return [];
      }
    } catch (e) {
      debugPrint(
        '[RecommendationsService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç DeepSeek: $e',
      );
      debugPrint(
        '[RecommendationsService] –ò—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤): ${response.length > 500 ? "${response.substring(0, 500)}..." : response}',
      );
      return [];
    }
  }

  /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞, —É–¥–∞–ª—è—è markdown –æ–±–µ—Ä—Ç–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
  String _extractJsonFromResponse(String response) {
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    String cleaned = response.trim();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç —Å markdown –±–ª–æ–∫–∞ –∫–æ–¥–∞
    if (cleaned.startsWith('```json')) {
      debugPrint(
        '[RecommendationsService] –û–±–Ω–∞—Ä—É–∂–µ–Ω markdown –±–ª–æ–∫ –∫–æ–¥–∞, –∏–∑–≤–ª–µ–∫–∞–µ–º JSON',
      );

      // –ò—â–µ–º –Ω–∞—á–∞–ª–æ JSON (–ø–æ—Å–ª–µ ```json –∏ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏)
      int startIndex = cleaned.indexOf('```json') + 7;

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ ```json
      while (startIndex < cleaned.length &&
          (cleaned[startIndex] == '\n' || cleaned[startIndex] == '\r')) {
        startIndex++;
      }

      // –ò—â–µ–º –∫–æ–Ω–µ—Ü JSON (–¥–æ closing ```)
      int endIndex = cleaned.lastIndexOf('```');

      if (endIndex > startIndex) {
        String extractedJson = cleaned.substring(startIndex, endIndex).trim();
        debugPrint('[RecommendationsService] JSON –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ markdown –±–ª–æ–∫–∞');
        return extractedJson;
      } else {
        debugPrint(
          '[RecommendationsService] –ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π markdown –±–ª–æ–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç',
        );
        return cleaned;
      }
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Å—Ç–æ ``` –≤ –Ω–∞—á–∞–ª–µ (–±–µ–∑ json)
    else if (cleaned.startsWith('```')) {
      debugPrint(
        '[RecommendationsService] –û–±–Ω–∞—Ä—É–∂–µ–Ω –æ–±—ã—á–Ω—ã–π markdown –±–ª–æ–∫ –∫–æ–¥–∞, –∏–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ',
      );

      // –ò—â–µ–º –Ω–∞—á–∞–ª–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ (–ø–æ—Å–ª–µ ``` –∏ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏)
      int startIndex = cleaned.indexOf('```') + 3;

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
      while (startIndex < cleaned.length &&
          (cleaned[startIndex] == '\n' || cleaned[startIndex] == '\r')) {
        startIndex++;
      }

      // –ò—â–µ–º –∫–æ–Ω–µ—Ü —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ (–¥–æ closing ```)
      int endIndex = cleaned.lastIndexOf('```');

      if (endIndex > startIndex) {
        String extractedContent =
            cleaned.substring(startIndex, endIndex).trim();
        debugPrint(
          '[RecommendationsService] –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑ markdown –±–ª–æ–∫–∞',
        );
        return extractedContent;
      } else {
        debugPrint(
          '[RecommendationsService] –ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π markdown –±–ª–æ–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç',
        );
        return cleaned;
      }
    }
    // –ï—Å–ª–∏ markdown –±–ª–æ–∫–æ–≤ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    else {
      debugPrint(
        '[RecommendationsService] Markdown –±–ª–æ–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–≤–µ—Ç –∫–∞–∫ –µ—Å—Ç—å',
      );
      return cleaned;
    }
  }

  /// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ QuestionEntity —Å —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º–æ–π
  List<QuestionEntity> _createQuestionEntitiesFromRecommendations(
    List<RecommendationCard> recommendations,
  ) {
    final List<QuestionEntity> questionEntities = [];

    for (int i = 0; i < recommendations.length; i++) {
      final recommendation = recommendations[i];

      // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞—Ä—É —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏
      final colorPair = _colorPairs[i % _colorPairs.length];

      questionEntities.add(
        QuestionEntity(
          title: _truncateText(recommendation.question, 60),
          subtitle: _truncateText(recommendation.description, 80),
          backColor: colorPair['back']!,
          arrowColor: colorPair['arrow']!,
        ),
      );
    }

    return questionEntities;
  }

  /// –û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏—è
  String _truncateText(String text, int maxLength) {
    if (text.length <= maxLength) {
      return text;
    }

    // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–æ–π –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ–±—Ä–µ–∑–∞–Ω–∏—è
    int cutIndex = maxLength;
    final lastSpaceIndex = text.lastIndexOf(' ', maxLength);

    if (lastSpaceIndex > maxLength * 0.7) {
      // –ï—Å–ª–∏ –ø—Ä–æ–±–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–µ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –Ω–∞—á–∞–ª—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
      cutIndex = lastSpaceIndex;
    }

    final truncatedText = '${text.substring(0, cutIndex).trim()}...';

    // –õ–æ–≥–∏—Ä—É–µ–º –æ–±—Ä–µ–∑–∞–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
    debugPrint(
      '[RecommendationsService] –û–±—Ä–µ–∑–∞–Ω —Ç–µ–∫—Å—Ç: "${text.substring(0, 30)}..." ‚Üí "${truncatedText.substring(0, 30)}..."',
    );

    return truncatedText;
  }

  /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ —á–µ—Ä–µ–∑ DeepSeek –∞–≥–µ–Ω—Ç
  Future<RecommendationResult> regenerateRecommendations() async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      final deviceLanguage = _getDeviceLanguage();

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤ (–±–µ–∑ –ª–æ–≥–æ–≤)
      final historyQuestions = await _getChatHistoryQuestionsQuiet();

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –ª–æ–≥–æ–≤)
      final interests = await _getUserInterestsQuiet();

      // –§–æ—Ä–º–∏—Ä—É–µ–º JSON –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ DeepSeek
      final jsonInput = {
        'language': deviceLanguage,
        'interests': interests.map((interest) => interest.name).toList(),
        'recent_questions': historyQuestions,
      };

      // –í—ã–≤–æ–¥–∏–º –≤—Ö–æ–¥–Ω–æ–π JSON
      debugPrint('[RecommendationsService] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ DeepSeek:');
      debugPrint(jsonEncode(jsonInput));

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ DeepSeek –∞–≥–µ–Ω—Ç recommendator
      final response = await _deepSeekService.sendMessage(
        agentType: AgentType.recommendator,
        message: jsonEncode(jsonInput),
      );

      // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç DeepSeek
      debugPrint('[RecommendationsService] –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç DeepSeek:');
      debugPrint(response);

      // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek
      final recommendationCards = _parseDeepSeekResponse(response);
      debugPrint(
        '[RecommendationsService] –†–∞—Å–ø–∞—Ä—Å–µ–Ω–æ ${recommendationCards.length} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π',
      );

      // –°–æ–∑–¥–∞–µ–º QuestionEntity –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
      final questionEntities = _createQuestionEntitiesFromRecommendations(
        recommendationCards,
      );
      debugPrint(
        '[RecommendationsService] –°–æ–∑–¥–∞–Ω–æ ${questionEntities.length} QuestionEntity',
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö QuestionEntity
      _cachedQuestionEntities = questionEntities;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      final savedRecommendations = SavedRecommendations(
        recommendations: recommendationCards,
        generatedAt: DateTime.now(),
        userInterests: interests.map((i) => i.name).toList(),
        deviceLanguage: deviceLanguage,
      );

      await _saveMainRecommendations(savedRecommendations);

      return RecommendationResult(
        success: true,
        message: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ',
        interestsCount: interests.length,
        interests: interests,
        deviceLocale: deviceLanguage,
        historyQuestions: historyQuestions,
        recommendationCards: recommendationCards,
        questionEntities: questionEntities,
      );
    } catch (e) {
      debugPrint(
        '[RecommendationsService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: $e',
      );
      return RecommendationResult(
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: $e',
        interestsCount: 0,
        deviceLocale: 'error',
      );
    }
  }

  /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä–≤–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–µ
  /// –û—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç regenerateRecommendations —Ç–µ–º, —á—Ç–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞
  Future<RecommendationResult> generateInitialRecommendations({
    required List<Interest> userInterests,
    String? userName,
  }) async {
    try {
      debugPrint(
        '[RecommendationsService] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–≤–∏—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞',
      );
      debugPrint(
        '[RecommendationsService] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userName ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}',
      );
      debugPrint(
        '[RecommendationsService] –ò–Ω—Ç–µ—Ä–µ—Å—ã: ${userInterests.map((i) => i.name).join(", ")}',
      );

      // –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      final deviceLanguage = _getDeviceLanguage();

      // –î–ª—è –ø–µ—Ä–≤–∏—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤
      // (–ø–æ—Å–∫–æ–ª—å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π)
      final jsonInput = {
        'language': deviceLanguage,
        'interests': userInterests.map((interest) => interest.name).toList(),
        'recent_questions': <String>[], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        'is_onboarding': true, // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
      };

      // –í—ã–≤–æ–¥–∏–º –≤—Ö–æ–¥–Ω–æ–π JSON
      debugPrint(
        '[RecommendationsService] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ DeepSeek:',
      );
      debugPrint(jsonEncode(jsonInput));

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ DeepSeek –∞–≥–µ–Ω—Ç recommendator
      final response = await _deepSeekService.sendMessage(
        agentType: AgentType.recommendator,
        message: jsonEncode(jsonInput),
      );

      // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç DeepSeek
      debugPrint('[RecommendationsService] –ü–µ—Ä–≤–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç DeepSeek:');
      debugPrint(response);

      // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek
      final recommendationCards = _parseDeepSeekResponse(response);
      debugPrint(
        '[RecommendationsService] –†–∞—Å–ø–∞—Ä—Å–µ–Ω–æ ${recommendationCards.length} –ø–µ—Ä–≤–∏—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π',
      );

      // –°–æ–∑–¥–∞–µ–º QuestionEntity –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
      final questionEntities = _createQuestionEntitiesFromRecommendations(
        recommendationCards,
      );
      debugPrint(
        '[RecommendationsService] –°–æ–∑–¥–∞–Ω–æ ${questionEntities.length} –ø–µ—Ä–≤–∏—á–Ω—ã—Ö QuestionEntity',
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö QuestionEntity
      _cachedQuestionEntities = questionEntities;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      final savedRecommendations = SavedRecommendations(
        recommendations: recommendationCards,
        generatedAt: DateTime.now(),
        userInterests: userInterests.map((i) => i.name).toList(),
        deviceLanguage: deviceLanguage,
      );

      await _saveMainRecommendations(savedRecommendations);

      return RecommendationResult(
        success: true,
        message: '–ü–µ—Ä–≤–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ',
        interestsCount: userInterests.length,
        interests: userInterests,
        deviceLocale: deviceLanguage,
        historyQuestions: <String>[], // –ü—É—Å—Ç–æ–π –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        recommendationCards: recommendationCards,
        questionEntities: questionEntities,
      );
    } catch (e) {
      debugPrint(
        '[RecommendationsService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–≤–∏—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: $e',
      );
      return RecommendationResult(
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–≤–∏—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: $e',
        interestsCount: userInterests.length,
        interests: userInterests,
        deviceLocale: 'error',
      );
    }
  }

  /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –≥–∞–¥–∞–Ω–∏—è –Ω–∞ –ò –î–∑–∏–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –Ω–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
  /// –ü—Ä–∏ —ç—Ç–æ–º –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
  Future<RecommendationResult>
  generateNewRecommendationsAfterDivination() async {
    try {
      debugPrint(
        '[RecommendationsService] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ù–û–í–´–• —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ—Å–ª–µ –≥–∞–¥–∞–Ω–∏—è –Ω–∞ –ò –î–∑–∏–Ω',
      );

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—ã–µ (–æ—Å–Ω–æ–≤–Ω—ã–µ) —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      final oldRecommendations = await _loadMainRecommendations();

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏—Å—Ç–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤
      final interests = await getUserInterests();
      final historyQuestions = await getChatHistoryQuestions();
      final deviceLanguage = _getDeviceLanguage();

      // –°–æ–∑–¥–∞–µ–º JSON –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ DeepSeek
      final jsonInput = {
        'language': deviceLanguage,
        'interests': interests.map((interest) => interest.name).toList(),
        'recent_questions': historyQuestions,
        'is_onboarding': false, // –ù–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
        'after_divination': true, // –§–ª–∞–≥ —á—Ç–æ —ç—Ç–æ –ø–æ—Å–ª–µ –≥–∞–¥–∞–Ω–∏—è
      };

      debugPrint(
        '[RecommendationsService] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –≥–∞–¥–∞–Ω–∏—è –≤ DeepSeek:',
      );
      debugPrint(jsonEncode(jsonInput));

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ DeepSeek
      final response = await _deepSeekService.sendMessage(
        agentType: AgentType.recommendator,
        message: jsonEncode(jsonInput),
      );

      debugPrint(
        '[RecommendationsService] –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç DeepSeek:',
      );
      debugPrint(response);

      // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
      final newRecommendationCards = _parseDeepSeekResponse(response);
      debugPrint(
        '[RecommendationsService] –†–∞—Å–ø–∞—Ä—Å–µ–Ω–æ ${newRecommendationCards.length} –Ω–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π',
      );

      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
      final newSavedRecommendations = SavedRecommendations(
        recommendations: newRecommendationCards,
        generatedAt: DateTime.now(),
        userInterests: interests.map((i) => i.name).toList(),
        deviceLanguage: deviceLanguage,
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      await _saveNewRecommendations(newSavedRecommendations);

      // –í—ã–≤–æ–¥–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∏ –Ω–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
      _compareOldAndNewRecommendations(
        oldRecommendations,
        newSavedRecommendations,
      );

      // –°–æ–∑–¥–∞–µ–º QuestionEntity –¥–ª—è –Ω–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π (–Ω–æ –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à)
      final newQuestionEntities = _createQuestionEntitiesFromRecommendations(
        newRecommendationCards,
      );

      return RecommendationResult(
        success: true,
        message: '–ù–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –≥–∞–¥–∞–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ',
        interestsCount: interests.length,
        interests: interests,
        deviceLocale: deviceLanguage,
        historyQuestions: historyQuestions,
        recommendationCards: newRecommendationCards,
        questionEntities: newQuestionEntities,
      );
    } catch (e) {
      debugPrint(
        '[RecommendationsService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ—Å–ª–µ –≥–∞–¥–∞–Ω–∏—è: $e',
      );
      return RecommendationResult(
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: $e',
        interestsCount: 0,
        deviceLocale: 'error',
      );
    }
  }

  /// –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∏ –Ω–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
  void _compareOldAndNewRecommendations(
    SavedRecommendations? oldRecommendations,
    SavedRecommendations newRecommendations,
  ) {
    debugPrint('==================================================');
    debugPrint('[RecommendationsService] –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô');
    debugPrint('==================================================');

    if (oldRecommendations == null) {
      debugPrint('[RecommendationsService] –°–¢–ê–†–´–ï —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ù–ï –ù–ê–ô–î–ï–ù–´');
    } else {
      debugPrint(
        '[RecommendationsService] –°–¢–ê–†–´–ï —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (${oldRecommendations.recommendations.length} —à—Ç.):',
      );
      for (int i = 0; i < oldRecommendations.recommendations.length; i++) {
        final rec = oldRecommendations.recommendations[i];
        debugPrint('[RecommendationsService] ${i + 1}. "${rec.question}"');
        debugPrint('[RecommendationsService]    –û–ø–∏—Å–∞–Ω–∏–µ: ${rec.description}');
      }
    }

    debugPrint('--------------------------------------------------');
    debugPrint(
      '[RecommendationsService] –ù–û–í–´–ï —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (${newRecommendations.recommendations.length} —à—Ç.):',
    );
    for (int i = 0; i < newRecommendations.recommendations.length; i++) {
      final rec = newRecommendations.recommendations[i];
      debugPrint('[RecommendationsService] ${i + 1}. "${rec.question}"');
      debugPrint('[RecommendationsService]    –û–ø–∏—Å–∞–Ω–∏–µ: ${rec.description}');
    }

    debugPrint('==================================================');
    debugPrint('[RecommendationsService] –ö–û–ù–ï–¶ –°–†–ê–í–ù–ï–ù–ò–Ø');
    debugPrint('==================================================');
  }
}

/// –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
class RecommendationResult {
  const RecommendationResult({
    required this.success,
    required this.message,
    required this.interestsCount,
    this.interests = const [],
    this.deviceLocale,
    this.historyQuestions = const [],
    this.recommendationCards = const [],
    this.questionEntities = const [],
  });

  /// –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
  final bool success;

  /// –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
  final String message;

  /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
  final int interestsCount;

  /// –°–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  final List<Interest> interests;

  /// –õ–æ–∫–∞–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  final String? deviceLocale;

  /// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–ª–∞–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤
  final List<String> historyQuestions;

  /// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç DeepSeek (—Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ)
  final List<RecommendationCard> recommendationCards;

  /// –ì–æ—Ç–æ–≤—ã–µ QuestionEntity –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ
  final List<QuestionEntity> questionEntities;

  @override
  String toString() {
    return 'RecommendationResult(success: $success, message: $message, interestsCount: $interestsCount, deviceLocale: $deviceLocale, historyQuestionsCount: ${historyQuestions.length}, recommendationsCount: ${recommendationCards.length})';
  }
}
